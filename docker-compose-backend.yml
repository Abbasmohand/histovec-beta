version: '3.4'

services:
  backend:
    image: ${APP}-backend
    build:
      context: ${BACKEND}
      target: ${EXEC_ENV}
      dockerfile: Dockerfile
      args:
        http_proxy: ${http_proxy}
        https_proxy: ${https_proxy}
        no_proxy: ${no_proxy}
        npm_registry: ${NPM_REGISTRY}
        MIRROR_DEBIAN: ${MIRROR_DEBIAN}
        app_path: /${APP}
        app_name: ${APP}
        app_ver: ${APP_VERSION}
        port: ${BACKEND_PORT}
    container_name: ${APP}-backend
    environment:
      - NODE_ENV=${EXEC_ENV}
      - BACKEND_PORT=${BACKEND_PORT}
      - APP=${APP}
      - APP_VERSION=${APP_VERSION}
      - REDIS_URL=${REDIS_URL}
      - REDIS_PERSIST=${REDIS_PERSIST}
      - ES_URL=${ES_HOST}:${ES_PORT}
      - ES_INDEX=${ES_INDEX}
      - OTC_URL=${OTC_SCHEME}://${OTC_HOST}:${OTC_PORT}/${OTC_API}
      - OTC_TIMEOUT=${OTC_TIMEOUT}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT}
      - MAIL_FROM=${MAIL_FROM}
      - MAIL_TO=${MAIL_TO}
    volumes:
      - ${BACKEND}/src:/${APP}/src/
      - /${APP}/node_modules
    restart: always
    links:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BACKEND_PORT}/${APP}/api/v1/health"]
      interval: 60s
      timeout: 5s
      retries: 3
      start_period: 40s


  redis:
    image: redis
    container_name: cache

networks:
  default:
    external:
      name: ${APP}
